gcc-7 -g -std=gnu99 -O3 -ffp-contract=off -mavx -mtune=ivybridge
 
commit 927c90cdb66b6af98fa3bd7a27d892af327e7256
Author: Radford Neal <radfordneal@gmail.com>
Date:   Fri Mar 2 17:00:25 2018 -0500

    bug fix
diff --git a/matprod.c b/matprod.c
index ed033a7..8841c9c 100644
--- a/matprod.c
+++ b/matprod.c
@@ -4882,7 +4882,8 @@ static void matprod_trans2_sub_xrowscols (double * MATPROD_RESTRICT x,
                                           double * MATPROD_RESTRICT z,
                                           int n, int k, int m,
                                           int xrows, int yrows, int xcols,
-                                          int add, double *sym EXTRAD);
+                                          int add, int final, 
+                                          double *sym EXTRAD);
 
 static void matprod_trans2_n2 (double * MATPROD_RESTRICT x,
                                double * MATPROD_RESTRICT y,
@@ -4979,7 +4980,7 @@ static void matprod_trans2_sub (double * MATPROD_RESTRICT x,
 
   if (n <= TRANS2_XROWS && k <= TRANS2_XCOLS)  /* do small cases quickly */
   { matprod_trans2_sub_xrowscols (x, y, z, n, k, m,
-                                  n, yrows, k, 0, sym EXTRAN);
+                                  n, yrows, k, 0, 1, sym EXTRAN);
     return;
   }
 
@@ -5075,7 +5076,7 @@ static void matprod_trans2_sub_xrows (double * MATPROD_RESTRICT x,
   if (k <= TRANS2_XCOLS
    || k <= (chunk = (TRANS2_XCOLS*TRANS2_XROWS/xrows) & ~7))
   { matprod_trans2_sub_xrowscols (x, y, z, n, k, m,
-                                  xrows, yrows, k, 0, sym EXTRAZ);
+                                  xrows, yrows, k, 0, 1, sym EXTRAZ);
     return;
   }
 
@@ -5084,7 +5085,7 @@ static void matprod_trans2_sub_xrows (double * MATPROD_RESTRICT x,
 
   while (xcols > 2*chunk)
   { matprod_trans2_sub_xrowscols (x, y, z, n, k, m,
-                                  xrows, yrows, chunk, add, sym EXTRAZ);
+                                  xrows, yrows, chunk, add, 0, sym EXTRAZ);
     x += (size_t)chunk*n;
     y += (size_t)chunk*m;
     xcols -= chunk;
@@ -5094,7 +5095,7 @@ static void matprod_trans2_sub_xrows (double * MATPROD_RESTRICT x,
   if (xcols > chunk)
   { int nc = ((xcols+1)/2) & ~3;  /* keep any alignment of x */
     matprod_trans2_sub_xrowscols (x, y, z, n, k, m,
-                                  xrows, yrows, nc, add, sym EXTRAZ);
+                                  xrows, yrows, nc, add, 0, sym EXTRAZ);
     x += (size_t)nc*n;
     y += (size_t)nc*m;
     xcols -= nc;
@@ -5102,7 +5103,7 @@ static void matprod_trans2_sub_xrows (double * MATPROD_RESTRICT x,
   }
 
   matprod_trans2_sub_xrowscols (x, y, z, n, k, m,
-                                xrows, yrows, xcols, add, sym EXTRAN);
+                                xrows, yrows, xcols, add, 1, sym EXTRAN);
 }
 
 /* Compute 'xcols' products of the sums that give the values of the
@@ -5118,14 +5119,16 @@ static void matprod_trans2_sub_xrows (double * MATPROD_RESTRICT x,
    is in the first column of z.  This information is used to shrink
    the number of rows and columns of z that are computed (sometimes to
    none) and to find the symmetrical counterpart to which computed
-   elements should be copied.  */
+   elements should be copied.  The copying need be done only if 'final'
+   is 1, indicating that this is the final change to the result elements. */
 
 static void matprod_trans2_sub_xrowscols (double * MATPROD_RESTRICT x,
                                           double * MATPROD_RESTRICT y,
                                           double * MATPROD_RESTRICT z,
                                           int n, int k, int m,
                                           int xrows, int yrows, int xcols,
-                                          int add, double *sym EXTRAD)
+                                          int add, int final, 
+                                          double *sym EXTRAD)
 {
 # if DEBUG_PRINTF
     debug_printf("trans2_sub_xrowscols %p %p %p - %d %d %d - %d %d %d %d %p\n",
@@ -5363,7 +5366,7 @@ static void matprod_trans2_sub_xrowscols (double * MATPROD_RESTRICT x,
 
     /* Copy to symmetric elements. */
 
-    if (sym)
+    if (sym && final)
     { double *s = sym + (size_t)n * (z-sym);
       double *t = z;
       while (t <= ez) 
@@ -5466,7 +5469,7 @@ static void matprod_trans2_sub_xrowscols (double * MATPROD_RESTRICT x,
 
     /* Copy to symmetric elements. */
 
-    if (sym)
+    if (sym && final)
     { double *s = sym + (size_t)n * (z-sym);
       double *t = z;
       while (t <= ez) 
