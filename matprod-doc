MATPROD - A LIBRARY FOR MATRIX MULTIPLICATION WITH OPTIONAL PIPELINING
          Documentation for Library Procedures and Test Programs

Copyright (C) 2013, 2014, 2017 Radford M. Neal.

  The matprod library is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License along
  with this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.


The matprod library provides double-precision real matrix/vector by
matrix/vector multiplication routines.  These routines are written
with some attention to cache performance and other efficiency issues,
and with optional code to take advantage of SSE2, SSE3, or AVX
instructions on Intel/AMD processors.  But they may not be as fast as
the matrix multiplication routines in optimized BLAS libraries.

However, these routines have been written to produce the same results
as the obvious matrix multiplication algorithms, that sequentially sum
products of elements.  These routines do not bypass multiplications by
zero, and therefore propagate Inf and NaN values properly.  They do
not re-group additions assuming associativity holds, so round-off
errors (and overflows) will be the same as for the obvious algorithms.
Note that producing the exact same result as the obvious methods
requires that the routine be built disabling any contraction of
floating-point operations (eg, fused multiply-add) that might be done
by the compiler/processor.

There are also versions of these routines that allow for possible
parallel operation in the context of a program using the helpers
library for parallel computation.

Note that matrices are assumed to be stored in FORTRAN memory order,
proceeding down columns (not across rows).  To use the matprod
routines with matrices stored in standard C (row-major) order, just
reverse the order of the input operands (and exchange matprod_trans1
and matprod_trans2, as well as matprod_vec_mat and matprod_mat_vec).


Building and using the procedures:

The non-pipelined routines, in matprod.c, are called in ordinary C
fashion.  The pipelined routines, in piped-matprod.c, are task
procedures for use with the helpers library for parallel computation
(available at https://github.com/radfordneal/helpers).

The matprod.c and piped-matprod.c should be compiled and linked with
the program using them in the usual fashion.  Some options can be set
by pre-processor symbols defined with arguments to the compiler, or
alternatively, by defining the symbol MATPROD_APP_INCLUDED (as
anything), which will cause the file matprod-app.h to be included at
the start of matprod.c and piped-matprod.c, which may then define
symbols that set these options.

These options include the following:

    ALIGN                If defined (must be a power of 2), the matprod
                         and piped_matprod functions will assume that
                         their arguments are aligned to such a
                         boundary (plus ALIGN_OFFSET, if defined).
                         This assumption may allow for faster and
                         smaller code.

    ALIGN_OFFSET         If ALIGN is defined, ALIGN_OFFSET gives the
                         offset from an even multiple of ALIGN that
                         arguments are aligned to.  If ALIGN_OFFSET is
                         not defined, zero is assumed.

    MATPROD_NO_RESTRICT  If defined, the arguments of the matprod and
                         piped_matprod functions will not be declared
                         with the "restricted" keyword.  This is meant
                         for performance testing - results are not
                         guaranteed correct in any case if the output
                         argument aliases with an input.

Some special code has been written to take advantage of the SSE2,
SSE3, or AVX instructions available on some Intel/AMD processors.  It
will be used only if gcc or a gcc look-alike is used, since this code
uses the builtin intrinsic functions that gcc provides.  This code can
be disabled by defining the symbol DISABLE_SIMD_CODE with a compiler
option; just the AVX code can be disabled by defining DISABLE_AVX_CODE
(in which case SSE2 or SSE3 code may still be used).  The SIMD code
sections are automatically disabled when the routines are compiled for
an architecture without the required instructions.

Note that depending on what architecture the compiler is told to
generate code for, instrinsics designed for SSE2 may actually generate
AVX instructions (and perhaps similarly for SSE2/SSE3, SSE3/SSE4.1,
AVX/AVX2, etc.).  However, code enabled for only SSE2, or SSE3, or AVX
should work on a processor having only the specified level of SIMD
instructions, if compiled for that processor.


Procedures in matprod.c:

The procedures below are in matprod.c, with declarations in matprod.h.
They are written with pointers declared as simply "double *", but, the
actual declaration will be "double * restrict" unless the matprod
source is compiled with -DMATPROD_NO_RESTRICT.

    double matprod_vec_vec (double *x, double *y, int k)

      Multiply row vector x and column vector y, both of dimension k,
      returning the result.

    void matprod_vec_mat (double *x, double *y, double *z, int k, int m)

      Multiply row vector x, of dimension k, and matrix y, of dimension
      k x m, storing the result in row vector z, of dimension m.

    void matprod_mat_vec (double *x, double *y, double *z, int n, int k)

      Multiply matrix x, of dimension n x k, and column vector y, of
      dimension k, storing the result in column vector z, of dimension n.

    void matprod_mat_mat (double *x, double *y, double *z, int n, int k, int m)

      Multiply matrix x, of dimension n x k, and matrix y, of dimension k
       x m, storing the result in matrix z, of dimension n x m.

    void matprod_outer (double *x, double *y, double *z, int n, int m)

      Multiply the length-n column vector x (ie, n x 1 matrix) by the
      length-m row vector y (ie, 1 x m matrix), storing the result in
      the matrix z, of dimension n x m.

    void matprod_trans1 (double *x, double *y, double *z, int n, int k, int m)

      Multiply the transpose of matrix x, of dimension k x n, and
      matrix y, of dimension k x m, storing the result in matrix z, of
      dimension n x m.

    void matprod_trans2 (double *x, double *y, double *z, int n, int k, int m)

      Multiply matrix x, of dimension n x k, and the transpose of
      matrix y, of dimension m x k, storing the result in matrix z, of
      dimension n x m.

For the above procedures, the result matrix, z, must have no overlap
with the operands, x and y.  However, the operands may be the same or
may overlap.

Some attention has been paid to making special cases of these routines
be fast - such as matprod_vec_mat when the vector is of length one,
which reduces to simply multiplying the elements of the matrix (with
one row) by a scalar.  The matprod_outer procedure will be called from
matprod_mat_mat, matprod_trans1, or matprod_trans2 when the value of k
passed is one (though calling it directly will of course be slightly
faster).  However, the cases of matprod_mat_mat, matprod_trans1, and
matprod_trans2 that reduce to matprod_vec_vec, matprod_vec_mat, or
matprod_mat_vec have not been optimized, on the assumption that the
caller will use the specialized procedure when appropriate.

See the comments in matprod.c for details on the algorithms used.


Task procedures in piped-matprod.c:

This source file defines the matprod routines that are task procedures
for use with the "helpers" facility, with pipelining of the second
operand (except for matprod_trans2) and pipelining of the output for
matrix-matrix and vector-matrix operations.

Using these routines requires the helpers.h and helpers.c files from
the helpers library, available at github.com/radfordneal/helpers.  A
helpers-app.h file must also be defined, which in addition to the type
definitions required for the helpers routines, must define a LENGTH
macro that returns the number of elements in an operand or result
matrix (equal to the number of rows times the number of columns), and
a REAL macro that returns a pointer to the double-precision data for
an operand or result matrix (or these macros can instead be defined in
a matprod-app.h file, which is included if MATPROD_APP_INCLUDED is
defined).

The task procedures are declared in piped-matprod.h to be of type
helpers_task_proc, for which the arguments are an op value, a pointer
to the result matrix, a pointer to the first operand matrix, and a
pointer to the second operand matrix.  (For some of the task
procedures, an operand may be a vector rather than a matrix, and the
result may be a vector or scalar instead of a matrix.)  The op value
is used only for the mat_mat, trans1, and trans2 procedures, for which
it gives the value of k (the number of products summed to compute each
element of the result).

The task procedures (found in piped-matprod.c) correspond to the
non-pipelined procedures above, and are as follows:

    task_piped_matprod_vec_vec

      Vector-vector multiply, with element-by-element pipelining of
      the second operand.

    task_piped_matprod_vec_mat

      Vector-matrix multiply, with column-by-column pipelining of the
      second operand, and element-by-element pipelining of the output.

    task_piped_matprod_mat_vec

      Matrix-vector multiply, with element-by-element pipelining of
      the second operand.

    task_piped_matprod_mat_mat

      Matrix-matrix multiply, with column-by-column pipelining of the
      second operand, and column-by-column pipelining of the output.

    task_piped_matprod_outer

      Matrix outer product of column vector and row vector, with
      element-by-element pipelining of the second operand, and
      column-by-column pipelining of the output.

    task_piped_matprod_trans1

      Multiplies the transpose of first operand matrix and the second
      operand matrix, with column-by-column pipelining of the second
      operand, and column-by-column pipelining of the output.

    task_piped_matprod_trans2

      Multiplies the first operand matrix and the transpose of the
      second operand matrix, with column-by-column pipelining of the
      output, but no pipelining of the operands.  (However, this task
      procedure does explicitly wait for the second operand to become
      available, in case it has been scheduled with pipelining of this 
      operand, since it is pipelined for all the other task procedures.)

Note that, to reduce overhead, columns or elements of pipelined output
may not always be made available immediately after being computed.


Test programs:

Test programs are provided for the matprod and piped-matprod routines,
in the directory "tests", which share a common framework, and which
can also be used to test matrix multiply routines in a BLAS or other
library.  These test programs can perform checks on correctness, but
are mainly meant for testing speed.  If ALIGN and/or ALIGN_OFFSET is
defined, the test program will allocate matrices with the specfied
alignment.

These programs are invoked by a command such as the following:

    matprod-test rep [ "t" | "T" ] A B C D [ "t" | "T" ]

Where the arguments (other than the optional "t" arguments) are
positive integers (or "v" or "V", as discussed below).  In this
example, three matrices of dimensions AxB, BxC, and CxD are created,
and the product of the first of these matrices with the product of the
second and third matrices is computed (note the right associativity),
with this computation repeated rep times (with identical results each
time, one hopes).  The first, second, second-to-last, and last
elements of the result are then printed on standard output, except
that fewer elements are printed when only fewer exist.  If the
environment variable PRINTWHOLE is defined (as anything), the entire
result matrix is also printed.

If the environment variable CHECK is defined (as anything), the
results are checked against simple code, resulting in either "Check
OK" being printed, or an error message followed by an abort.  Note
that these checks take time, and so should not be done when running
the test programs for performance evaluation.

In general, n>2 arguments (other than "t" or "T") follow the rep
argument, defining the dimensions of n-1 matrices, which are used as
operands in n-2 matrix multiplication operations, which associate to
the right.  The result of each of these products will be a matrix with
number of rows equal to the first argument and number of columns equal
to the last argument.

If the optional "t" or "T" argument precedes the matrix dimensions,
the final multiply (by the AxB matrix in the example above) is done by
multiplying by the transpose of this matrix (eg, with matprod_trans1).
Similarly, if the optional final "t" or "T" argument is present, the
first multiply (of a CxD matrix in the example above) is done on the
transpose of this matrix (eg, using matprod_trans2).  If only one
multiplication is done (ie, only three matrix dimensions are
specified), "t" or "T" must not be on both the left and right (ie, a
multiply with both operands transposed is not allowed).

If "T" is specified instead of "t" on either the right or left, the
result of the multiply must be a square matrix (eg, for "T" on the
right, B must be the same as D in the example above).  The two
operands of this multiply will then be set to be the same matrix,
which may allow for the multiply to be done more quickly (eg, by
exploiting the fact that the result is symmetric).  

An argument after rep with the value "1" may be replaced with the
argument "v" or "V", which has the same effect as "1", except that the
appropriate mat_vec, vec_mat, or vec_vec procedure is used for some or
all products, rather than the general matrix multiplication procedure.
This applies both to the vectors specified in this way, and the
vectors that result from multiplying such a vector by a matrix.  For
example, if the last argument is "v", all the products will use the
mat_vec procedure, except if the first operand was also specified
using "v" or "V", in which case the vec_vec procedure will be used.

The matrices created by the test programs have elements that are set
to 0.1 times the sum of the number of rows and columns in the matrix,
plus 0.01 times the product of the number of rows and columns in the
matrix, plus 0.01 times the product of the row and column indexes for
each element.  A matrix whose transpose will be used as an operand
will be initialized so that this is its value after transposition, so
the results obtained should be the same with or without the "t"
option, on either the left or right.  Since the initialization is
invariant to transposition, the result with "T" instead of "t" is also
the same.

The matprod_outer procedure is never called directly from the test
program, but will be called indirectly via matprod_mat_mat,
matprod_trans1, or matrod_trans2 when the k argument is 1.

Several test programs can be compiled using the supplied Makefile,
including the following:

    matprod-test

      Uses the procedures in matprod.c.  A number of other versions of
      this test program are also compiled, with varying alignment
      options, etc.  See the Makefile for details.

    piped-matprod-test

      Uses the procedures in piped-matprod.c, and the helpers library.
      The number of helper threads used is given by the environment
      variable HELPERS (default 0).  If an environment variable TRACE
      is defined, trace output from the helpers library is enabled.
      See below for the special role of a last argument of "V".  Some
      other versions are also compiled; see the Makefile for details.

    blas0-test

      Uses BLAS routines in the following FORTRAN source files:

          ddot.f  dgemv.f  dgemm.f  dsyrk.f  lsame.f

      A xerbla routine for BLAS error reporting is provided as part of 
      the test program.  The dsyrk routine is used when the "T" option 
      is specified, along with a C routine for filling in the lower 
      triangle of the matrix from the upper triangle.  

      The versions of these files distributed here were downloaded on
      2017-11-27 from www.netlib.org/blas.

    blas1-test

      Like blas-test, except that all BLAS routines are taken from one
      file called blas1.f.  The version of blas1.f distributed is the
      one used in R-2.15.0, which is a modifed version of the
      reference BLAS.

    blas2-test

      Like blas-test, except that all BLAS routines are taken from one
      file called blas2.f.  The vesion of blas2.f distributed is the
      modified version of the one from R-2.15.0 that is used in pqR.

    blas3-test

      Like blas-test, except that BLAS routines are taken from the
      Linux library /usr/lib/libblas.so.3, which can be set to various
      BLAS implementations (eg, by using "update-alternatives").  The
      location of this library may be different on some Linux systems.

The blas test programs are not compiled by default, but are by "make
blas".

The helpers procedures that are used in the piped-matprod test
programs can be obtained from github.com/radfordneal/helpers.

If the last argument to piped-matprod-test is "V" (only, not "v"), the
final matrix (a column vector) will be supplied as pipelined output
from a task procedure that delivers elements in groups of 17 (or fewer
for the last group), with variable time lags.  This allows pipelining
to be tested for the mat_vec and vec_vec procedures, for which
pipelined input cannot otherwise be arranged.  (Of course, this is
slower than just accessing the already-initialized matrix.)

The shell file run-tests runs a series of tests, with the test program
specified by its first argument (eg, "matprod", for matprod-test).
